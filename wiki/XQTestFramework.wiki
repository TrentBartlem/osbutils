#summary XQuery transformation testing framework

= Introduction =

The XQTest Framework provides a framework for creating JUnit tests for XQuery transformations.

= Downloads =

 * [http://code.google.com/p/osbutils/downloads/detail?name=xqtestfmk-0.1-2011-04-13-bin.jar&can=2&q= Latest binary JAR]

= Source Code =

The source code is available from Google code. The code can either be
[http://code.google.com/p/osbutils/source/browse/#svn%2Ftrunk%2FXQTestFramework browsed online] or, if you would like to contribute, can be accessed with a Subversion client.

= Contents =
 * [XQTestFramework#Examples Examples]
 * [XQTestFramework#Classpath ClassPath]
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages


= Examples =

== Testing with XML Files ==

This example demonstrates how to construct a test that reads XML from files for both the parameters to the XQuery transformation and also the expected result.

{{{
...
import java.io.File;
import org.junit.Before;
import org.junit.Test;
...
public class XQExampleTest extends XQAbstractTest {
	...
	@Before
	public void setup() {
		declareNamespace("test", "http://www.example.org/test");
	}
	...
	@Test
	public void test1 {
		executeQuery(new File("MyTest.xq"));
		setParameter("param1", new File("testdata/MyTest/test1/param1.xml"));
		setParameter("param2", new File("testdata/MyTest/test1/param2.xml"));
		assertEquals(new File("testdata/MyTest/test1/expected-result.xml"));
	}	
}
}}}

== Testing With XPaths ==

The following example demonstrates how to construct a test that evaluates an XPath in the result against a string value.
 
{{{
...
import java.io.File;
import org.junit.Before;
import org.junit.Test;
...
public class XQExampleTest extends XQAbstractTest {
	...
	@Before
	public void setup() {
		declareNamespace("test", "http://www.example.org/test");
		setParameter("test", new File("test.xml");
	}
	...
	@Test
	public void test1 {
		executeQuery(new File("test.xq"));
		assertEquals(0, "./test:Test/@testattr", "attrval");
	}	
}
}}}

= Classpath =

This framework uses both Apache XML Beans and JUnit frameworks. It also uses the WebLogic XQuery implementation. As such in order to build or run an XQuery test based on this framework the following must be available on the classpath:

 * The OSB utils library containing this framework
 * JUnit 4 Library
 * Apache XML Beans library
 * WebLogic XQuery implementation library
 * WebLogic XQuery and Apache XML Beans interoperation library
 * Antlr library (required by the XQuery library)

Based on an OSB 11g installation this resulted in the following classpath:

 * xqtestfmk-0.1-2011-04-13-bin.jar
 * _${eclipse.home}_/plugins/org.junit4_4.5.0.v20090824.jar
 * _${wl.home}_/modules/com.bea.core.xml.xmlbeans_2.2.0.0.jar
 * _${wl.home}_/modules/com.bea.core.xquery.xmlbeans-interop_1.3.0.0.jar
 * _${wl.home}_/modules/com.bea.core.xquery_1.3.0.0.jar
 * _${wl.home}_/modules/com.bea.core.antlr.runtime_2.7.7.jar
